#include <array>
#include <gtest/gtest.h>
#include <ranges>

#include "may-2025/number_cross_cell.h"
#include "may-2025/number_cross_grid_predicates.h"

#include <fmt/ranges.h>


TEST(NumberCrossPredicates, IsPrime)
{
    constexpr auto tests = std::array<int64_t, 490>{
        120521,      26047793,    39,          8917,        3191,        4266996062,  7365,        2863230041,
        70492,       51,          214,         20,          12251,       741,         62965609473, 14109,
        123855152,   703973,      2807417,     586,         94641456786, 40943878173, 302,         1008,
        3787418,     67555439,    153,         76064,       359,         5675,        6853,        1010435,
        2433,        362205655,   2196,        3932549312,  4090175685,  110265,      27021441,    761474,
        1229,        640676,      5952369740,  863721,      6324260,     184,         19755,       47,
        3493849584,  10369324,    2095307049,  9303772238,  1057798,     2561,        147211,      38521,
        5332837307,  44357,       956,         96289,       399462,      21927128,    4363161,     2146,
        1760,        1702291243,  19498,       56514977,    384036,      384084,      9244146,     2797638,
        5594715758,  8242925,     688,         12538161135, 210760,      28525936,    12791,       27,
        160581412,   3706748,     145230456,   6983315,     13123,       296025721,   2108714,     34103,
        20686743472, 362498621,   104348,      48667515174, 14711725,    2200917973,  3623957,     4500849775,
        55,          181,         73377,       278,         296385,      1625,        198773,      72171046,
        208424,      1036943895,  43177543151, 61527555,    11005,       225,         63453090,    2768,
        1125,        6923064,     62099,       25627354,    229939214,   3268904,     424458389,   15692494,
        78303,       2071779,     89143374304, 2544,        208441227,   2182367,     148048,      23682,
        11407393900, 27764505,    663811305,   611,         1268805325,  250,         3582338926,  49221,
        13109187283, 4753791125,  3787,        3900,        3963579227,  260370272,   326,         6225303550,
        157798,      5577156459,  948964793,   942,         303764,      89895106406, 10425,       23,
        280223,      12432163,    6137306,     62508,       298,         106766537,   78,          7599831,
        11,          141140961,   1683321258,  94040865101, 25200118,    41811789974, 31704,       10815107,
        266,         46,          141547,      7789922,     6614700,     813,         14468,       2766,
        81,          269266187,   2602,        246663,      305282786,   230,         906255853,   60229938146,
        204,         18328822,    389813,      94056634,    3610743,     5456046,     625219,      102471,
        12487,       283919730,   3321501658,  2661097203,  215915,      799,         2265,        1548012,
        224996,      10112702081, 8740622,     22516746,    9535728344,  12731990,    6969269,     4681486186,
        3002,        274,         352578,      4903934,     49153,       4661047011,  592,         410692,
        63462792658, 38041151,    604,         2506335,     103334550,   274593,      5597988,     56313858533,
        2426,        12709472,    36028,       11402,       8733339,     91832,       9109422,     9801736,
        8190448,     66144,       21499945,    2695,        26923632555, 221775485,   764,         30141,
        218193,      91,          3112,        17574658,    22861990589, 558,         1885884,     1996403858,
        1144873,     9166307528,  137356,      1888748610,  37883,       3214,        397018,      495487,
        14262437,    40560,       137157291,   1611541,     158938318,   20244,       33844,       37,
        71494821094, 225808,      38547907033, 882,         333672280,   12222,       3417,        2961375,
        662,         21228086,    83119,       114,         1749334396,  475,         669254309,   16752,
        34683,       39409442841, 979322,      84961,       2459968430,  56305053,    79031824,    425829,
        125374,      49,          2854180007,  58474,       4854117,     68704,       3045996149,  98710117,
        146932236,   1055243403,  12159502939, 424722492,   1684,        1043,        15,          19715,
        8392221564,  56075,       43911460,    126760508,   8025,        381519,      9221,        616673222,
        4248952,     99,          20397,       3765944,     1243489975,  926600915,   12116725,    64,
        413613546,   17,          1842572670,  107230013,   1261,        57017413418, 1174688,     16063295,
        1431,        16,          12618,       81174,       348497,      24,          1818015504,  314,
        15535842531, 373250,      591323698,   94240137,    4383002490,  55934,       4117620285,  4772793,
        47664115,    3887,        2000825,     3069,        5822214,     486595,      615326,      580378714,
        3979,        916675,      2379276103,  815,         43854,       16051256655, 90508,       13105970763,
        38307,       3888641554,  3885111168,  87850935093, 67829507,    112,         43768654,    112483253,
        3922661,     75114,       40,          4840,        37014705,    58797028,    74741,       248242737,
        47517077,    13,          391251899,   58753,       6944210,     194,         76807,       316673074,
        1788749,     820093,      1109941,     21165,       18,          6039081252,  33252448110, 636236,
        7977063,     117,         1412833,     127,         2285639289,  5238660,     1347462,     50449448047,
        6509500931,  793,         3551,        3549046,     35508553550, 173072,      10920,       22,
        81037928464, 1519112532,  302996116,   34537038807, 863657434,   15575326,    105,         218343505,
        351133,      1392392,     505750,      77276,       442,         44811009,    76899730473, 4726495071,
        87737,       48923404,    36016245683, 40645,       1677,        88156362064, 149,         43100502498,
        1157,        1638,        177,         4174999834,  6776848,     287623777,   10018444788, 441888645,
        324790845,   3428315,     323344651,   8131615,     3596587352,  115,         110307,      904671308,
        4182939,     93416267965, 427034522,   38957,       708459931,   206417938,   21402886304, 49733,
        9201273656,  26,          2818625,     59993,       95,          4006093927,  29730,       24938608,
        460,         997362574,   9665669,     1021,        411352,      98145804139, 55834966393, 30529,
        503643,      226,         118241746,   2775,        48484974727, 15371383434, 751372964,   59857,
        4332275,     969752,      87118905336, 289778,      2851805,     3663155,     22804906754, 12258048,
        14956313774, 7972};

    constexpr auto res = std::array<bool, 490>{
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    std::array<grid_cell, 11> arr;
    is_prime                  pred{};
    for(auto const [x, r]: std::views::zip(tests, res))
    {
        size_t  sz = 0;
        int64_t n  = x;
        while(n)
        {
            arr[11 - (++sz)].set_digit(n % 10);
            n /= 10;
        }
        auto const cells = std::span<grid_cell const>{arr.data() + (11 - sz), sz};
        EXPECT_EQ(pred.check(x, cells), r) << "Failed for prime number: " << x;
    }
}

TEST(NumberCrossPredicates, ProductOfDigitsMatches)
{
    product_of_digits_matches<25> pred25{};

    constexpr auto num1 = std::array<grid_cell, 4>{1, 1, 5, 5};
    EXPECT_TRUE(pred25.check(num1));
    EXPECT_EQ(pred25.get_allowed_digits(), std::bitset<10>{0b100010});

    product_of_digits_matches<2025> pred2025{};

    constexpr auto num2 = std::array<grid_cell, 5>{3, 9, 5, 5, 3};
    EXPECT_TRUE(pred2025.check(num2));
    constexpr auto num3 = std::array<grid_cell, 4>{9, 5, 5, 9};
    EXPECT_TRUE(pred2025.check(num3));
    EXPECT_EQ(pred2025.get_allowed_digits(), std::bitset<10>{0b1000101010});
}
